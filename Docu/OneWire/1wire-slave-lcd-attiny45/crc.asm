/**
 * functions for calculating crc8 (X^8+X^5+X^4+1) and crc16 (X^16+X^15+X^2+1)
 * 
 * The functions uses constant tables for lokkup and calculation. Alternative
 * use "#define CRC_COMPUTE" to use complete calculation and not include constants.
 * That saves 768 bytes PROGMEM.
 * 
 * ----------------------------------------------------------------------------------
 * 
 * Copyright (C) 2009 runlevel3 GmbH
 * 
 * ----------------------------------------------------------------------------------
 * 
 * LICENSE:
 * 
 * This file is part of AVR-projects.
 * 
 * AVR-projects is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * AVR-projects is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with AVR-projects; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 * ----------------------------------------------------------------------------------
 * 
 * AVR Assembler 2
 * 
 * ----------------------------------------------------------------------------------
 * 
 * @copyright 2009 runlevel3 GmbH
 * @license   http://www.gnu.org/licenses/gpl.txt GNU General Public License v2
 * @link      http://www.runlevel3.de runlevel3
 **/



;register definitions
#ifndef	TMP_REGS
#define	TMP_REGS
.def	tmp0		= R24
.def	tmp1		= R25
#endif
#ifndef	TMP2_REGS
#define	TMP2_REGS
.def	tmp2		= R22
.def	tmp3		= R23
#endif


.dseg
crc8_data:		.byte	1
crc16_data_l:	.byte	1
crc16_data_h:	.byte	1


.cseg										;Code-Segment

#ifdef	CRC_COMPUTE

;compute crc of data in tmp0, return crc8_data
crc8:
		push	tmp1						;save register
		push	tmp0						;save data
		ldi		tmp1,8						;loop counter
crc8_loop:
		push	tmp1						;save loopcounter
		lds		tmp1,crc8_data				;load old crc
    	eor		tmp1,tmp0					;tmp = ((crc8_data ^ w1_data) & 1);
		ror		tmp1
		lds		tmp1,crc8_data				;load old crc
		brcc	crc8_tmp_0
		push	tmp0						;save data
		ldi		tmp0,0x18
		eor		tmp1,tmp0
		pop		tmp0
crc8_tmp_0:
		ror		tmp1
		sts		crc8_data,tmp1
		lsr		tmp0
		pop		tmp1
		dec		tmp1						;dec loopcounter
		brne	crc8_loop
		pop		tmp0
		pop		tmp1
		ret

;compute crc16 of data in tmp0, return crc16:crc16+1
crc16:
		push	tmp2						;save register
		push	tmp1
		push	tmp0						;save data
		ldi		tmp1,8						;loop counter
crc16_loop:
		push	tmp1						;save loop counter
		ror		tmp0						;shift input data
		push	tmp0						;save data
		ldi		tmp1,1						;for bit complement
		lds		tmp0,crc16_data_l
		brcc	crc16_in_0
		eor		tmp0,tmp1					;complement bit0 
crc16_in_0:
		clc									;for ror into crc_h
		lds		tmp1,crc16_data_h
		sbrs	tmp0,0
		rjmp	crc16_shift
		sec									;for ror into crc_h
		ldi		tmp2,1<<1
		eor		tmp0,tmp2
		ldi		tmp2,1<<6
		eor		tmp1,tmp2
crc16_shift:
		ror		tmp1
		ror		tmp0
		sts		crc16_data_l,tmp0			;save new crc
		sts		crc16_data_h,tmp1
		pop		tmp0						;restore data
		pop		tmp1
		dec		tmp1						;dec loopcounter
		brne	crc16_loop
		pop		tmp0
		pop		tmp1
		pop		tmp2
		ret

#else										;CRC_COMPUTE

;compute crc of data in tmp0, return tmp0 and crc8_data
crc8:
		push	ZL
		push	ZH
		push	tmp1
		push	tmp0						;save data
		lds		tmp1,crc8_data
		eor		tmp0,tmp1					;compute table index
		ldi		ZL,LOW(2*crc8_table)		;load rom storage address
		ldi		ZH,HIGH(2*crc8_table)
		clr		tmp1						;for adc
		add		ZL,tmp0						;and add to pointer
		adc		ZH,tmp1
		lpm		tmp0,Z						;load precomputed crc from table
		sts		crc8_data,tmp0				;and store crc
		pop		tmp0
		pop		tmp1
		pop		ZH
		pop		ZL
		ret

crc8_table:
		.db		0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83
		.db		0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41
		.db		0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e
		.db		0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc
		.db		0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0
		.db		0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62
		.db		0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d
		.db		0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff
		.db		0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5
		.db		0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07
		.db		0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58
		.db		0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a
		.db		0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6
		.db		0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24
		.db		0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b
		.db		0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9
		.db		0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f
		.db		0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd
		.db		0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92
		.db		0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50
		.db		0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c
		.db		0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee
		.db		0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1
		.db		0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73
		.db		0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49
		.db		0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b
		.db		0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4
		.db		0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16
		.db		0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a
		.db		0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8
		.db		0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7
		.db		0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35

		
;compute crc16 of data in tmp0, return crc16_data_h:crc16_data_l
crc16:
		push	ZL
		push	ZH
		push	tmp1
		push	tmp0						;save data
		lds		tmp1,crc16_data_l			;load old crc low
		eor		tmp0,tmp1					;compute index
		push	tmp0						;save index
		ldi		ZL,LOW(2*crc16_table_low)	;load rom storage address
		ldi		ZH,HIGH(2*crc16_table_low)
		clr		tmp1						;for adc
		add		ZL,tmp0						;and add to pointer
		adc		ZH,tmp1
		lpm		tmp0,Z
		lds		tmp1,crc16_data_h			;load old crc high
		eor		tmp0,tmp1					;compute crc low
		sts		crc16_data_l,tmp0			;save crc low
		ldi		ZL,LOW(2*crc16_table_high)	;load rom storage address
		ldi		ZH,HIGH(2*crc16_table_high)
		pop		tmp0						;restore index
		clr		tmp1						;for adc
		add		ZL,tmp0						;and add to pointer
		adc		ZH,tmp1
		lpm		tmp0,Z
		sts		crc16_data_h,tmp0			;save crc h
		pop		tmp0
		pop		tmp1
		pop		ZH
		pop		ZL
		ret

crc16_table_low:
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41
		.db		0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40
crc16_table_high:
		.db		0x00, 0xc0, 0xc1, 0x01, 0xc3, 0x03, 0x02, 0xc2
		.db		0xc6, 0x06, 0x07, 0xc7, 0x05, 0xc5, 0xc4, 0x04
		.db		0xcc, 0x0c, 0x0d, 0xcd, 0x0f, 0xcf, 0xce, 0x0e
		.db		0x0a, 0xca, 0xcb, 0x0b, 0xc9, 0x09, 0x08, 0xc8
		.db		0xd8, 0x18, 0x19, 0xd9, 0x1b, 0xdb, 0xda, 0x1a
		.db		0x1e, 0xde, 0xdf, 0x1f, 0xdd, 0x1d, 0x1c, 0xdc
		.db		0x14, 0xd4, 0xd5, 0x15, 0xd7, 0x17, 0x16, 0xd6
		.db		0xd2, 0x12, 0x13, 0xd3, 0x11, 0xd1, 0xd0, 0x10
		.db		0xf0, 0x30, 0x31, 0xf1, 0x33, 0xf3, 0xf2, 0x32
		.db		0x36, 0xf6, 0xf7, 0x37, 0xf5, 0x35, 0x34, 0xf4
		.db		0x3c, 0xfc, 0xfd, 0x3d, 0xff, 0x3f, 0x3e, 0xfe
		.db		0xfa, 0x3a, 0x3b, 0xfb, 0x39, 0xf9, 0xf8, 0x38
		.db		0x28, 0xe8, 0xe9, 0x29, 0xeb, 0x2b, 0x2a, 0xea
		.db		0xee, 0x2e, 0x2f, 0xef, 0x2d, 0xed, 0xec, 0x2c
		.db		0xe4, 0x24, 0x25, 0xe5, 0x27, 0xe7, 0xe6, 0x26
		.db		0x22, 0xe2, 0xe3, 0x23, 0xe1, 0x21, 0x20, 0xe0
		.db		0xa0, 0x60, 0x61, 0xa1, 0x63, 0xa3, 0xa2, 0x62
		.db		0x66, 0xa6, 0xa7, 0x67, 0xa5, 0x65, 0x64, 0xa4
		.db		0x6c, 0xac, 0xad, 0x6d, 0xaf, 0x6f, 0x6e, 0xae
		.db		0xaa, 0x6a, 0x6b, 0xab, 0x69, 0xa9, 0xa8, 0x68
		.db		0x78, 0xb8, 0xb9, 0x79, 0xbb, 0x7b, 0x7a, 0xba
		.db		0xbe, 0x7e, 0x7f, 0xbf, 0x7d, 0xbd, 0xbc, 0x7c
		.db		0xb4, 0x74, 0x75, 0xb5, 0x77, 0xb7, 0xb6, 0x76
		.db		0x72, 0xb2, 0xb3, 0x73, 0xb1, 0x71, 0x70, 0xb0
		.db		0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92
		.db		0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54
		.db		0x9c, 0x5c, 0x5d, 0x9d, 0x5f, 0x9f, 0x9e, 0x5e
		.db		0x5a, 0x9a, 0x9b, 0x5b, 0x99, 0x59, 0x58, 0x98
		.db		0x88, 0x48, 0x49, 0x89, 0x4b, 0x8b, 0x8a, 0x4a
		.db		0x4e, 0x8e, 0x8f, 0x4f, 0x8d, 0x4d, 0x4c, 0x8c
		.db		0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86
		.db		0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40

#endif										;CRC_COMPUTE


crc_cseg_end:								;cseg end address
